name: ProfileService

on:
  push:
    branches: [ master ]
    paths:
      - src/Services/ProfileService/**
  pull_request:
    branches: [ master ]
    paths:
      - src/Services/ProfileService/**

defaults:
  run:
    working-directory: src

jobs:

  build:
    name: Build
    # To prevent bugs in case latest has breaking changes
    runs-on: ubuntu-20.04
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2

    # Sets up the .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    
    # Installs the dependencies
    - name: Install dependencies
      run: dotnet restore ./Services/ProfileService/Rest

    # Builds the code
    - name: Build
      run: dotnet build --no-restore ./Services/ProfileService/Rest
  
  test:
    needs: build
    name: Test
    # To prevent bugs in case latest has breaking changes
    runs-on: ubuntu-20.04
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2

    # Tests the code
    - name: Build
      run: dotnet test ./Services/ProfileService/Tests

  docker:
    needs: 
     - test
    name: Build and push Docker images
    environment:
      name: docker
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to Google Docker registry
    # Setup gcloud CLI
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_key: ${{ secrets.GOOGLE_REGISTRY_KEY }} 
    - name: Configure Google Auth
    # Configure docker to use the gcloud command-line tool as a credential helper
      run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
    
    - name: Build and push ProfileService Docker image 
      run: |
        echo "Building ProfileService docker image"
        docker build -t ${{ secrets.PROFILE_SERVICE_REGISTRY }}:latest -f ./Services/ProfileService/Rest/Dockerfile .
        echo "Publishing ProfileService docker image"
        docker push --all-tags ${{ secrets.PROFILE_SERVICE_REGISTRY }}